{"ast":null,"code":"import { getFoodApi, getDrinksApi } from '../../services';\nconst actions = {\n  REQUEST_FOOD_API: 'REQUEST_FOOD_API',\n  REQUEST_DRINK_API: 'REQUEST_DRINK_API',\n  SET_DRINK_DATA: 'SET_DRINK_DATA',\n  SET_FOOD_DATA: 'SET_FOOD_DATA',\n  FAILED_REQUEST: 'FAILED_REQUEST',\n  FILTER_FOOD: 'FILTER_FOOD',\n  FILTER_DRINK: 'FILTER_DRINK'\n};\nexport const filterDrink = payload => ({\n  type: actions.FILTER_DRINK,\n  payload\n});\nexport const filterFood = payload => ({\n  type: actions.FILTER_FOOD,\n  payload\n});\nexport const requestApiFood = () => ({\n  type: actions.REQUEST_FOOD_API\n});\nexport const requestApiDrink = () => ({\n  type: actions.REQUEST_DRINK_API\n});\nexport const requestFoodApi = payload => ({\n  type: actions.SET_FOOD_DATA,\n  payload\n});\nexport const requestDrinkApi = payload => ({\n  type: actions.SET_DRINK_DATA,\n  payload\n});\nexport const failedRequest = error => ({\n  type: actions.FAILED_REQUEST,\n  payload: error\n});\nexport const fetchFoodApi = (payload1, payload2) => async dispatch => {\n  dispatch(requestApiFood());\n\n  try {\n    const {\n      meals,\n      categories\n    } = await getFoodApi(payload1, payload2);\n\n    if (categories) {\n      dispatch(requestFoodApi(categories));\n    }\n\n    dispatch(requestFoodApi(meals));\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\nexport const fetchDrinkApi = (payload1, payload2) => async dispatch => {\n  dispatch(requestApiDrink());\n\n  try {\n    const {\n      drinks\n    } = await getDrinksApi(payload1, payload2);\n    dispatch(requestDrinkApi(drinks));\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\nexport default actions;","map":{"version":3,"sources":["/home/bamberg/sd-013-b-project-recipes-app/src/redux/actions/index.js"],"names":["getFoodApi","getDrinksApi","actions","REQUEST_FOOD_API","REQUEST_DRINK_API","SET_DRINK_DATA","SET_FOOD_DATA","FAILED_REQUEST","FILTER_FOOD","FILTER_DRINK","filterDrink","payload","type","filterFood","requestApiFood","requestApiDrink","requestFoodApi","requestDrinkApi","failedRequest","error","fetchFoodApi","payload1","payload2","dispatch","meals","categories","message","fetchDrinkApi","drinks"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,gBAAzC;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,gBAAgB,EAAE,kBADJ;AAEdC,EAAAA,iBAAiB,EAAE,mBAFL;AAGdC,EAAAA,cAAc,EAAE,gBAHF;AAIdC,EAAAA,aAAa,EAAE,eAJD;AAKdC,EAAAA,cAAc,EAAE,gBALF;AAMdC,EAAAA,WAAW,EAAE,aANC;AAOdC,EAAAA,YAAY,EAAE;AAPA,CAAhB;AAUA,OAAO,MAAMC,WAAW,GAAIC,OAAD,KAAc;AACvCC,EAAAA,IAAI,EAAEV,OAAO,CAACO,YADyB;AACXE,EAAAA;AADW,CAAd,CAApB;AAIP,OAAO,MAAME,UAAU,GAAIF,OAAD,KAAc;AACtCC,EAAAA,IAAI,EAAEV,OAAO,CAACM,WADwB;AACXG,EAAAA;AADW,CAAd,CAAnB;AAIP,OAAO,MAAMG,cAAc,GAAG,OAAO;AACnCF,EAAAA,IAAI,EAAEV,OAAO,CAACC;AADqB,CAAP,CAAvB;AAIP,OAAO,MAAMY,eAAe,GAAG,OAAO;AACpCH,EAAAA,IAAI,EAAEV,OAAO,CAACE;AADsB,CAAP,CAAxB;AAIP,OAAO,MAAMY,cAAc,GAAIL,OAAD,KAAc;AAC1CC,EAAAA,IAAI,EAAEV,OAAO,CAACI,aAD4B;AACbK,EAAAA;AADa,CAAd,CAAvB;AAIP,OAAO,MAAMM,eAAe,GAAIN,OAAD,KAAc;AAC3CC,EAAAA,IAAI,EAAEV,OAAO,CAACG,cAD6B;AACbM,EAAAA;AADa,CAAd,CAAxB;AAIP,OAAO,MAAMO,aAAa,GAAIC,KAAD,KAAY;AACvCP,EAAAA,IAAI,EAAEV,OAAO,CAACK,cADyB;AACTI,EAAAA,OAAO,EAAEQ;AADA,CAAZ,CAAtB;AAIP,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB,MAAOC,QAAP,IAAoB;AACtEA,EAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;;AACA,MAAI;AACF,UAAM;AAAEU,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAwB,MAAMzB,UAAU,CAACqB,QAAD,EAAWC,QAAX,CAA9C;;AACA,QAAIG,UAAJ,EAAgB;AACdF,MAAAA,QAAQ,CAACP,cAAc,CAACS,UAAD,CAAf,CAAR;AACD;;AACDF,IAAAA,QAAQ,CAACP,cAAc,CAACQ,KAAD,CAAf,CAAR;AACD,GAND,CAME,OAAOL,KAAP,EAAc;AACdI,IAAAA,QAAQ,CAACL,aAAa,CAACC,KAAK,CAACO,OAAP,CAAd,CAAR;AACD;AACF,CAXM;AAaP,OAAO,MAAMC,aAAa,GAAG,CAACN,QAAD,EAAWC,QAAX,KAAwB,MAAOC,QAAP,IAAoB;AACvEA,EAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;;AACA,MAAI;AACF,UAAM;AAAEa,MAAAA;AAAF,QAAa,MAAM3B,YAAY,CAACoB,QAAD,EAAWC,QAAX,CAArC;AACAC,IAAAA,QAAQ,CAACN,eAAe,CAACW,MAAD,CAAhB,CAAR;AACD,GAHD,CAGE,OAAOT,KAAP,EAAc;AACdI,IAAAA,QAAQ,CAACL,aAAa,CAACC,KAAK,CAACO,OAAP,CAAd,CAAR;AACD;AACF,CARM;AAUP,eAAexB,OAAf","sourcesContent":["import { getFoodApi, getDrinksApi } from '../../services';\n\nconst actions = {\n  REQUEST_FOOD_API: 'REQUEST_FOOD_API',\n  REQUEST_DRINK_API: 'REQUEST_DRINK_API',\n  SET_DRINK_DATA: 'SET_DRINK_DATA',\n  SET_FOOD_DATA: 'SET_FOOD_DATA',\n  FAILED_REQUEST: 'FAILED_REQUEST',\n  FILTER_FOOD: 'FILTER_FOOD',\n  FILTER_DRINK: 'FILTER_DRINK',\n};\n\nexport const filterDrink = (payload) => ({\n  type: actions.FILTER_DRINK, payload,\n});\n\nexport const filterFood = (payload) => ({\n  type: actions.FILTER_FOOD, payload,\n});\n\nexport const requestApiFood = () => ({\n  type: actions.REQUEST_FOOD_API,\n});\n\nexport const requestApiDrink = () => ({\n  type: actions.REQUEST_DRINK_API,\n});\n\nexport const requestFoodApi = (payload) => ({\n  type: actions.SET_FOOD_DATA, payload,\n});\n\nexport const requestDrinkApi = (payload) => ({\n  type: actions.SET_DRINK_DATA, payload,\n});\n\nexport const failedRequest = (error) => ({\n  type: actions.FAILED_REQUEST, payload: error,\n});\n\nexport const fetchFoodApi = (payload1, payload2) => async (dispatch) => {\n  dispatch(requestApiFood());\n  try {\n    const { meals, categories } = await getFoodApi(payload1, payload2);\n    if (categories) {\n      dispatch(requestFoodApi(categories));\n    }\n    dispatch(requestFoodApi(meals));\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\n\nexport const fetchDrinkApi = (payload1, payload2) => async (dispatch) => {\n  dispatch(requestApiDrink());\n  try {\n    const { drinks } = await getDrinksApi(payload1, payload2);\n    dispatch(requestDrinkApi(drinks));\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\n\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}