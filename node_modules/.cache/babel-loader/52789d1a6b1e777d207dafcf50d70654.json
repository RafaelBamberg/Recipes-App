{"ast":null,"code":"import { getFoodApi, getDrinksApi } from '../../services';\nconst actions = {\n  REQUEST_FOOD_API: 'REQUEST_FOOD_API',\n  REQUEST_DRINK_API: 'REQUEST_DRINK_API',\n  SET_DRINK_DATA: 'SET_DRINK_DATA',\n  SET_FOOD_DATA: 'SET_FOOD_DATA',\n  SET_FOOD_INGREDIENTS: 'SET_FOOD_INGREDIENTS',\n  SET_DRINKS_INGREDIENTS: 'SET_DRINKS_INGREDIENTS',\n  SET_FOOD_AREA: 'SET_FOOD_AREA',\n  FAILED_REQUEST: 'FAILED_REQUEST',\n  FILTER_FOOD: 'FILTER_FOOD',\n  FILTER_DRINK: 'FILTER_DRINK',\n  RECIPES_MADE_FOOD: 'RECIPES_MADE_FOOD',\n  RECIPES_MADE_DRINK: 'RECIPES_MADE_DRINK'\n};\nexport const adcMadeRecipesFood = payload => ({\n  type: actions.RECIPES_MADE_FOOD,\n  payload\n});\nexport const adcMadeRecipesDrink = payload => ({\n  type: actions.RECIPES_MADE_DRINK,\n  payload\n});\nexport const filterDrink = payload => ({\n  type: actions.FILTER_DRINK,\n  payload\n});\nexport const filterFood = payload => ({\n  type: actions.FILTER_FOOD,\n  payload\n});\nexport const requestApiFood = () => ({\n  type: actions.REQUEST_FOOD_API\n});\nexport const requestApiDrink = () => ({\n  type: actions.REQUEST_DRINK_API\n});\nexport const requestFoodApi = payload => ({\n  type: actions.SET_FOOD_DATA,\n  payload\n});\nexport const requestFoodIngredients = payload => ({\n  type: actions.SET_FOOD_INGREDIENTS,\n  payload\n});\nexport const requestFoodArea = payload => ({\n  type: actions.SET_FOOD_AREA,\n  payload\n});\nexport const requestDrinksIngredients = payload => ({\n  type: actions.SET_DRINKS_INGREDIENTS,\n  payload\n});\nexport const requestDrinkApi = payload => ({\n  type: actions.SET_DRINK_DATA,\n  payload\n});\nexport const failedRequest = error => ({\n  type: actions.FAILED_REQUEST,\n  payload: error\n});\nexport const fetchFoodApi = (payload1, payload2) => async dispatch => {\n  dispatch(requestApiFood());\n\n  try {\n    const {\n      meals\n    } = await getFoodApi(payload1, payload2);\n\n    if (payload1 === 'list.php?i=') {\n      dispatch(requestFoodIngredients(meals));\n    } else if (payload1 === 'list.php?a=') {\n      dispatch(requestFoodArea(meals));\n    } else {\n      dispatch(requestFoodApi(meals));\n    }\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\nexport const fetchDrinkApi = (payload1, payload2) => async dispatch => {\n  dispatch(requestApiDrink());\n\n  try {\n    const {\n      drinks\n    } = await getDrinksApi(payload1, payload2);\n\n    if (payload1 === 'list.php?i=') {\n      dispatch(requestDrinksIngredients(drinks));\n    } else {\n      dispatch(requestDrinkApi(drinks));\n    }\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\nexport default actions;","map":{"version":3,"sources":["/home/bamberg/sd-013-b-project-recipes-app/src/redux/actions/index.js"],"names":["getFoodApi","getDrinksApi","actions","REQUEST_FOOD_API","REQUEST_DRINK_API","SET_DRINK_DATA","SET_FOOD_DATA","SET_FOOD_INGREDIENTS","SET_DRINKS_INGREDIENTS","SET_FOOD_AREA","FAILED_REQUEST","FILTER_FOOD","FILTER_DRINK","RECIPES_MADE_FOOD","RECIPES_MADE_DRINK","adcMadeRecipesFood","payload","type","adcMadeRecipesDrink","filterDrink","filterFood","requestApiFood","requestApiDrink","requestFoodApi","requestFoodIngredients","requestFoodArea","requestDrinksIngredients","requestDrinkApi","failedRequest","error","fetchFoodApi","payload1","payload2","dispatch","meals","message","fetchDrinkApi","drinks"],"mappings":"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","sourcesContent":["import { getFoodApi, getDrinksApi } from '../../services';\n\nconst actions = {\n  REQUEST_FOOD_API: 'REQUEST_FOOD_API',\n  REQUEST_DRINK_API: 'REQUEST_DRINK_API',\n  SET_DRINK_DATA: 'SET_DRINK_DATA',\n  SET_FOOD_DATA: 'SET_FOOD_DATA',\n  SET_FOOD_INGREDIENTS: 'SET_FOOD_INGREDIENTS',\n  SET_DRINKS_INGREDIENTS: 'SET_DRINKS_INGREDIENTS',\n  SET_FOOD_AREA: 'SET_FOOD_AREA',\n  FAILED_REQUEST: 'FAILED_REQUEST',\n  FILTER_FOOD: 'FILTER_FOOD',\n  FILTER_DRINK: 'FILTER_DRINK',\n  RECIPES_MADE_FOOD: 'RECIPES_MADE_FOOD',\n  RECIPES_MADE_DRINK: 'RECIPES_MADE_DRINK',\n};\n\nexport const adcMadeRecipesFood = (payload) => ({\n  type: actions.RECIPES_MADE_FOOD, payload,\n});\n\nexport const adcMadeRecipesDrink = (payload) => ({\n  type: actions.RECIPES_MADE_DRINK, payload,\n});\n\nexport const filterDrink = (payload) => ({\n  type: actions.FILTER_DRINK, payload,\n});\n\nexport const filterFood = (payload) => ({\n  type: actions.FILTER_FOOD, payload,\n});\n\nexport const requestApiFood = () => ({\n  type: actions.REQUEST_FOOD_API,\n});\n\nexport const requestApiDrink = () => ({\n  type: actions.REQUEST_DRINK_API,\n});\n\nexport const requestFoodApi = (payload) => ({\n  type: actions.SET_FOOD_DATA, payload,\n});\n\nexport const requestFoodIngredients = (payload) => ({\n  type: actions.SET_FOOD_INGREDIENTS, payload,\n});\n\nexport const requestFoodArea = (payload) => ({\n  type: actions.SET_FOOD_AREA, payload,\n});\n\nexport const requestDrinksIngredients = (payload) => ({\n  type: actions.SET_DRINKS_INGREDIENTS, payload,\n});\n\nexport const requestDrinkApi = (payload) => ({\n  type: actions.SET_DRINK_DATA, payload,\n});\n\nexport const failedRequest = (error) => ({\n  type: actions.FAILED_REQUEST, payload: error,\n});\n\nexport const fetchFoodApi = (payload1, payload2) => async (dispatch) => {\n  dispatch(requestApiFood());\n  try {\n    const { meals } = await getFoodApi(payload1, payload2);\n    if (payload1 === 'list.php?i=') {\n      dispatch(requestFoodIngredients(meals));\n    } else if (payload1 === 'list.php?a=') {\n      dispatch(requestFoodArea(meals));\n    } else {\n      dispatch(requestFoodApi(meals));\n    }\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\nexport const fetchDrinkApi = (payload1, payload2) => async (dispatch) => {\n  dispatch(requestApiDrink());\n  try {\n    const { drinks } = await getDrinksApi(payload1, payload2);\n    if (payload1 === 'list.php?i=') {\n      dispatch(requestDrinksIngredients(drinks));\n    } else {\n      dispatch(requestDrinkApi(drinks));\n    }\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\n\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}