{"ast":null,"code":"import { getFoodApi, getDrinksApi } from '../../services';\nconst actions = {\n  REQUEST_FOOD_API: 'REQUEST_FOOD_API',\n  REQUEST_DRINK_API: 'REQUEST_DRINK_API',\n  SET_DRINK_DATA: 'SET_DRINK_DATA',\n  SET_FOOD_DATA: 'SET_FOOD_DATA',\n  FAILED_REQUEST: 'FAILED_REQUEST'\n};\nexport const requestApiFood = () => ({\n  type: actions.REQUEST_FOOD_API\n});\nexport const requestApiDrink = () => ({\n  type: actions.REQUEST_DRINK_API\n});\nexport const requestFoodApi = payload => ({\n  type: actions.SET_FOOD_DATA,\n  payload\n});\nexport const requestDrinkApi = payload => ({\n  type: actions.SET_DRINK_DATA,\n  payload\n});\nexport const failedRequest = error => ({\n  type: actions.FAILED_REQUEST,\n  payload: error\n});\nexport const fetchFoodApi = (payload1, payload2) => async dispatch => {\n  dispatch(requestApiFood());\n\n  try {\n    const {\n      meals\n    } = await getFoodApi(payload1, payload2);\n    dispatch(requestFoodApi(meals));\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\nexport const fetchDrinkApi = (payload1, payload2) => async dispatch => {\n  dispatch(requestApiDrink());\n\n  try {\n    const {\n      drinks\n    } = await getDrinksApi(payload1, payload2);\n    dispatch(requestDrinkApi(drinks));\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\nexport default actions;","map":{"version":3,"sources":["/home/bamberg/sd-013-b-project-recipes-app/src/redux/actions/index.js"],"names":["getFoodApi","getDrinksApi","actions","REQUEST_FOOD_API","REQUEST_DRINK_API","SET_DRINK_DATA","SET_FOOD_DATA","FAILED_REQUEST","requestApiFood","type","requestApiDrink","requestFoodApi","payload","requestDrinkApi","failedRequest","error","fetchFoodApi","payload1","payload2","dispatch","meals","message","fetchDrinkApi","drinks"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,gBAAzC;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,gBAAgB,EAAE,kBADJ;AAEdC,EAAAA,iBAAiB,EAAE,mBAFL;AAGdC,EAAAA,cAAc,EAAE,gBAHF;AAIdC,EAAAA,aAAa,EAAE,eAJD;AAKdC,EAAAA,cAAc,EAAE;AALF,CAAhB;AAQA,OAAO,MAAMC,cAAc,GAAG,OAAO;AACnCC,EAAAA,IAAI,EAAEP,OAAO,CAACC;AADqB,CAAP,CAAvB;AAIP,OAAO,MAAMO,eAAe,GAAG,OAAO;AACpCD,EAAAA,IAAI,EAAEP,OAAO,CAACE;AADsB,CAAP,CAAxB;AAIP,OAAO,MAAMO,cAAc,GAAIC,OAAD,KAAc;AAC1CH,EAAAA,IAAI,EAAEP,OAAO,CAACI,aAD4B;AACbM,EAAAA;AADa,CAAd,CAAvB;AAIP,OAAO,MAAMC,eAAe,GAAID,OAAD,KAAc;AAC3CH,EAAAA,IAAI,EAAEP,OAAO,CAACG,cAD6B;AACbO,EAAAA;AADa,CAAd,CAAxB;AAIP,OAAO,MAAME,aAAa,GAAIC,KAAD,KAAY;AACvCN,EAAAA,IAAI,EAAEP,OAAO,CAACK,cADyB;AACTK,EAAAA,OAAO,EAAEG;AADA,CAAZ,CAAtB;AAIP,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB,MAAOC,QAAP,IAAoB;AACtEA,EAAAA,QAAQ,CAACX,cAAc,EAAf,CAAR;;AACA,MAAI;AACF,UAAM;AAAEY,MAAAA;AAAF,QAAY,MAAMpB,UAAU,CAACiB,QAAD,EAAWC,QAAX,CAAlC;AACAC,IAAAA,QAAQ,CAACR,cAAc,CAACS,KAAD,CAAf,CAAR;AACD,GAHD,CAGE,OAAOL,KAAP,EAAc;AACdI,IAAAA,QAAQ,CAACL,aAAa,CAACC,KAAK,CAACM,OAAP,CAAd,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMC,aAAa,GAAG,CAACL,QAAD,EAAWC,QAAX,KAAwB,MAAOC,QAAP,IAAoB;AACvEA,EAAAA,QAAQ,CAACT,eAAe,EAAhB,CAAR;;AACA,MAAI;AACF,UAAM;AAAEa,MAAAA;AAAF,QAAa,MAAMtB,YAAY,CAACgB,QAAD,EAAWC,QAAX,CAArC;AACAC,IAAAA,QAAQ,CAACN,eAAe,CAACU,MAAD,CAAhB,CAAR;AACD,GAHD,CAGE,OAAOR,KAAP,EAAc;AACdI,IAAAA,QAAQ,CAACL,aAAa,CAACC,KAAK,CAACM,OAAP,CAAd,CAAR;AACD;AACF,CARM;AAUP,eAAenB,OAAf","sourcesContent":["import { getFoodApi, getDrinksApi } from '../../services';\n\nconst actions = {\n  REQUEST_FOOD_API: 'REQUEST_FOOD_API',\n  REQUEST_DRINK_API: 'REQUEST_DRINK_API',\n  SET_DRINK_DATA: 'SET_DRINK_DATA',\n  SET_FOOD_DATA: 'SET_FOOD_DATA',\n  FAILED_REQUEST: 'FAILED_REQUEST',\n};\n\nexport const requestApiFood = () => ({\n  type: actions.REQUEST_FOOD_API,\n});\n\nexport const requestApiDrink = () => ({\n  type: actions.REQUEST_DRINK_API,\n});\n\nexport const requestFoodApi = (payload) => ({\n  type: actions.SET_FOOD_DATA, payload,\n});\n\nexport const requestDrinkApi = (payload) => ({\n  type: actions.SET_DRINK_DATA, payload,\n});\n\nexport const failedRequest = (error) => ({\n  type: actions.FAILED_REQUEST, payload: error,\n});\n\nexport const fetchFoodApi = (payload1, payload2) => async (dispatch) => {\n  dispatch(requestApiFood());\n  try {\n    const { meals } = await getFoodApi(payload1, payload2);\n    dispatch(requestFoodApi(meals));\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\n\nexport const fetchDrinkApi = (payload1, payload2) => async (dispatch) => {\n  dispatch(requestApiDrink());\n  try {\n    const { drinks } = await getDrinksApi(payload1, payload2);\n    dispatch(requestDrinkApi(drinks));\n  } catch (error) {\n    dispatch(failedRequest(error.message));\n  }\n};\n\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}